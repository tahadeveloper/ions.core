<?php

namespace {{ namespace }};

use Illuminate\Support\Carbon;
use Ions\Builders\QueryBuilder;
use Ions\Foundation\ProviderController;
use Ions\Support\Arr;
use Ions\Support\DB;
use stdClass;
use Throwable;

class {{ class }} extends ProviderController
{
    private static array $columns = [{{ columns }}];

    /**
     * @param array $items
     * @param bool $expect = false
     * @return string[]
     * @noinspection PhpSameParameterValueInspection
     */
    private static function rules(array $items = [], bool $expect = false): array
    {
        $rules = [
            'title' => 'required',
            'id' => 'required|numeric|not_in:0|exists:{{ table }},id',
            'ids' => 'required|array'
        ];

        $selectRules = $expect ? Arr::except($rules, $items) : Arr::only($rules, $items);
        return $items ? $selectRules : $rules;
    }

    /**
     * @param stdClass $param
     * @return static
     */
    public static function store(stdClass $param): static
    {
        if ($validated = validate($param, static::rules(['name']))) {
            self::badRequest($validated);
            return new self();
        }

        try {
            DB::table('{{ table }}')->insert([
                'title' => $param->title,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ]);
            self::createdResponse(['response' => trans('create_success', [], 'provider')]);
        } catch (Throwable $exception) {
            self::serverError($exception->getMessage());
        }

        return new self();
    }

    /**
     * @param int $id
     * @return static
     */
    public static function single(int $id): static
    {
        if ($validated = validate(['id' => $id],self::rules(['id']))) {
            self::badRequest($validated);
            return new self();
        }

        try {
            $item = QueryBuilder::for('{{ table }}')
                ->allowedFields(self::$columns)
                ->allowFilters()
                ->sole($id);
            self::successResponse($item);
        } catch (Throwable $exception) {
            self::serverError($exception->getMessage());
        }
        return new self();
    }

    /**
     * @return static
     */
    public static function show(): static
    {
        try {
            $data = QueryBuilder::for('{{ table }}')
                ->allowedFields(self::$columns)
                ->allowFilters()
                ->allowedSorts(self::$columns)
                ->get();
            $paging = ['total' => $data['total'], 'limit' => $data['limit'], 'offset' => $data['offset']];
            self::successResponse(array_merge($paging, ['items' => $data['items']]));
        } catch (Throwable $exception) {
            self::serverError($exception->getMessage());
        }
        return new self();
    }

    /**
     * @param stdClass $param
     * @return static
     */
    public static function update(stdClass $param): static
    {
        if ($validated = validate($param, static::rules(['id', 'name']))) {
            self::badRequest($validated);
            return new self();
        }

        $elements = (array) $param;
        $elements = Arr::except($elements, ['id']);

        try {
            DB::table('{{ table }}')
                ->where('id', $param->id)->update($elements + [
                    'updated_at' => Carbon::now()
                ]);
            self::updatedResponse(['response' => trans('update_success', [], 'provider')]);
        } catch (Throwable $exception) {
            self::serverError($exception->getMessage());
        }

        return new self();
    }

    /**
     * @param int|array $param
     * @param bool $multi
     * @return static
     */
    public static function delete(int|array $param, bool $multi = false): static
    {
        if ($multi) {
            $options = ['items' => ['ids'=> $param], 'rules' => self::rules(['ids'])];
        } else {
            $options = ['items' => ['id'=> $param], 'rules' => self::rules(['id'])];
        }
        if ($validation = validate($options['items'], $options['rules'])) {
            self::badRequest($validation);
            return new self();
        }

        try {
            $builder = DB::table('{{ table }}');
            if ($multi) {
                $builder->whereIn('id', $param);
            } else {
                $builder->where('id', $param);
            }

            $builder->delete();
            self::deletedResponse(['response' => trans('delete_success', [], 'provider')]);
        } catch (Throwable $exception) {
            self::serverError($exception->getMessage());
        }
        return new self();
    }

    /**
     * @return static
     */
    public static function count(): static
    {
        try {
            $count = QueryBuilder::for('{{ table }}')
                ->allowedFields(self::$columns)
                ->allowFilters()
                ->count();
            self::successResponse(['count' => $count]);
        } catch (Throwable $exception) {
            self::serverError($exception->getMessage());
        }
        return new self();
    }
}
